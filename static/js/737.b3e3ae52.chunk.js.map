{"version":3,"file":"static/js/737.b3e3ae52.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://goit-react-hw-08-phonebook/./src/components/contactForm/contactForm.module.css?5312","Redux/selectors.js","components/contactForm/contactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/contactList/contactList.module.css?e2f8","components/contactList/contactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/pages/Phonebook/Phonebook.module.css?1c37","pages/Phonebook/Phonebook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\"};","import css from './Button.module.css';\n\nexport const Button = ({\n  selected = false,\n  type = 'button',\n  children,\n  ...otherProps\n}) => {\n  return (\n    <button className={css.btn} type={type} {...otherProps}>\n      {children}\n    </button>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"contactForm_container__Fi-5m\",\"inputs\":\"contactForm_inputs__jGBKZ\",\"margin\":\"contactForm_margin__b5PA+\",\"label\":\"contactForm_label__cLo1s\"};","export const selectTasks = state => state.contacts.items;\n\nexport const selectStatusFilter = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'components/Button/Button';\nimport css from './contactForm.module.css';\nimport { selectTasks } from 'Redux/selectors';\nimport { addContact } from 'Redux/operations';\n\nimport { BiUser, BiPhone } from 'react-icons/bi';\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectTasks);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const inputValue = form.elements.text.value;\n    const contactExists = contacts.find(\n      contact => contact.name.toLowerCase() === inputValue.toLowerCase()\n    );\n\n    if (contactExists) {\n      alert(`${inputValue} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: inputValue,\n        number: form.elements.number.value,\n      })\n    );\n\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.container}>\n      {/* <label className={css.label}>Name</label> */}\n      <div className={css.margin}>\n        <span style={{ position: 'absolute' }}>\n          <BiUser viewBox=\"-2 -2 24 24\" />\n        </span>\n        <input\n          className={css.inputs}\n          type=\"text\"\n          name=\"text\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </div>\n      {/* <label className={css.label}>Number</label> */}\n      <div className={css.margin}>\n        <span style={{ position: 'absolute', margin: '2px 2px 2px 1px' }}>\n          <BiPhone viewBox=\"0 0 22 22\" />\n        </span>\n        <input\n          className={css.inputs}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <Button type=\"submit\">Add contact</Button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__list\":\"contactList_contact__list__yfr2X\",\"contact__list__item\":\"contactList_contact__list__item__LgiXv\",\"contact__style\":\"contactList_contact__style__Xr8Vb\",\"contact__list__name\":\"contactList_contact__list__name__dX995\",\"contact__list__number\":\"contactList_contact__list__number__WvVKo\"};","import { Button } from 'components/Button/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'Redux/operations';\nimport { selectStatusFilter, selectTasks } from 'Redux/selectors';\nimport css from './contactList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectTasks);\n  console.log(`contacts`, contacts);\n\n  const filter = useSelector(selectStatusFilter).toLowerCase();\n  const dataNormalize = filter.toLowerCase();\n\n  const normalizedContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(dataNormalize)\n  );\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <ul className={css.contact__list}>\n        {normalizedContacts.map(contact => (\n          <li key={contact.id} className={css.contact__list__item}>\n            <div className={css.contact__style}>\n              <span className={css.contact__list__name}>{contact.name}</span>\n              <span className={css.contact__list__number}>\n                : {contact.number}\n              </span>\n            </div>\n            {/* <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button> */}\n            <Button onClick={() => dispatch(deleteContact(contact.id))}>\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__input\":\"Filter_filter__input__toa89\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { change } from '../../Redux/filtersSlice';\nimport { nanoid } from 'nanoid';\nimport { selectStatusFilter } from 'Redux/selectors';\nimport css from './Filter.module.css';\n\nconst filterInputId = nanoid();\n\nexport const ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectStatusFilter);\n\n  const onChange = e => {\n    dispatch(change(e.target.value));\n  };\n\n  return (\n    <div>\n      <label htmlFor={filterInputId}> Find contacts </label>\n      <input\n        className={css.filter__input}\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n      ></input>\n    </div>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"one\":\"Phonebook_one__Ijs9o\"};","import { ContactsForm } from 'components/contactForm/contactForm';\nimport { ContactList } from 'components/contactList/contactList';\nimport { ContactFilter } from 'components/Filter/Filter';\nimport { Loader } from 'components/loader/loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'Redux/operations';\nimport { selectError, selectIsLoading } from 'Redux/selectors';\nimport css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.one}>\n      <h1>Phonebook</h1>\n      <ContactsForm></ContactsForm>\n      <h2>Contacts</h2>\n      <ContactFilter></ContactFilter>\n      <ContactList />\n      {isLoading && !error && <Loader />}\n    </div>\n  );\n}\n"],"names":["Button","selected","type","children","otherProps","className","css","selectTasks","state","contacts","items","selectStatusFilter","filters","selectIsLoading","isLoading","selectError","error","ContactsForm","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","form","target","inputValue","elements","text","value","find","contact","name","toLowerCase","alert","addContact","number","reset","style","position","viewBox","pattern","title","required","margin","ContactList","console","log","dataNormalize","normalizedContacts","filter","includes","map","onClick","deleteContact","id","filterInputId","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","ContactFilter","htmlFor","onChange","e","change","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}